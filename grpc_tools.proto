syntax = "proto3";

package mafia_game;

service MafiaGame {
    rpc OnClientConnect(PlayerName) returns (PlayerId) {}
    rpc OnClientAction(ActionRequest) returns (ActionResponse) {}
    rpc OnClientHeartbeat(PlayerId) returns (Actions) {}
    rpc GetAllPlayers(Empty) returns (PlayerList) {}
    rpc GetPlayerStats(PlayerId) returns (PlayerStats) {}
    rpc GetValidActions(PlayerId) returns (Actions) {}
    rpc GetSessionInfo(PlayerId) returns (SessionInfo) {}
    rpc GetLightSessionInfo(PlayerId) returns (LightSessionInfo) {}
    rpc GetNonSessionPids(Empty) returns (PidList) {}
}

message Empty {
}

message PlayerId {
    int32 player_id = 1;
}

message PidList {
    repeated int32 pids = 1;
}

message PlayerName {
    string player_name = 1;
}

message PlayerStats {
    int32 session_count = 1;
    int32 win_count = 2;
    int32 lose_count = 3;
    int32 time_in_game = 4;
    bool is_pid_valid = 5;
}

message SessionPlayer {
    int32 player_id = 1;
    string player_name = 2;
    string player_role = 3;
}

message SessionInfo {
    int32 session_id = 1;
    bool is_day = 2;
    repeated SessionPlayer players = 3;
}

message LightSessionInfo {
    int32 session_id = 1;
    string player_role = 2;
    bool is_pid_valid = 3;
    bool is_day = 4;
    repeated int32 mafia_pids = 5;
    repeated int32 other_pids = 6;
}

message Player {
    int32 player_id = 1;
    int32 session_id = 2;
    string player_name = 3;
}

message PlayerList {
    repeated Player all_players = 1;
}

message ActionRequest {
    int32 player_id = 1;
    string action = 2;
}

message ActionResponse {
    bool is_success = 1;
}

message Actions {
    int32 session_id = 1;
    repeated string actions = 2;
}
